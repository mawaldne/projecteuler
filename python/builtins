ArithmeticError:\  nBase class for arithmetic errors.\  n\  nAssertionError:\  nAssertion failed.\  n\  nAttributeError:\  nAttribute not found.\  n\  nBaseException:\  nCommon base class for all exceptions\  n\  nBufferError:\  nBuffer error.\  n\  nBytesWarning:\  nBase class for warnings about bytes and buffer related problems, mostly
related to conversion from str or comparing to str.\  n\  nDeprecationWarning:\  nBase class for warnings about deprecated features.\  n\  nEOFError:\  nRead beyond end of file.\  n\  nEnvironmentError:\  nBase class for I/O related errors.\  n\  nException:\  nCommon base class for all non-exit exceptions.\  n\  nFalse:\  nbool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.\  n\  nFloatingPointError:\  nFloating point operation failed.\  n\  nFutureWarning:\  nBase class for warnings about constructs that will change semantically
in the future.\  n\  nGeneratorExit:\  nRequest that a generator exit.\  n\  nIOError:\  nI/O operation failed.\  n\  nImportError:\  nImport can't find module, or can't find name in module.\  n\  nImportWarning:\  nBase class for warnings about probable mistakes in module imports\  n\  nIndentationError:\  nImproper indentation.\  n\  nIndexError:\  nSequence index out of range.\  n\  nKeyError:\  nMapping key not found.\  n\  nKeyboardInterrupt:\  nProgram interrupted by user.\  n\  nLookupError:\  nBase class for lookup errors.\  n\  nMemoryError:\  nOut of memory.\  n\  nNameError:\  nName not found globally.\  n\  nNotImplementedError:\  nMethod or function hasn't been implemented yet.\  n\  nOSError:\  nOS system call failed.\  n\  nOverflowError:\  nResult too large to be represented.\  n\  nPendingDeprecationWarning:\  nBase class for warnings about features which will be deprecated
in the future.\  n\  nReferenceError:\  nWeak ref proxy used after referent went away.\  n\  nRuntimeError:\  nUnspecified run-time error.\  n\  nRuntimeWarning:\  nBase class for warnings about dubious runtime behavior.\  n\  nStopIteration:\  nSignal the end from iterator.__next__().\  n\  nSyntaxError:\  nInvalid syntax.\  n\  nSyntaxWarning:\  nBase class for warnings about dubious syntax.\  n\  nSystemError:\  nInternal error in the Python interpreter.

Please report this to the Python maintainer, along with the traceback,
the Python version, and the hardware/OS platform and version.\  n\  nSystemExit:\  nRequest to exit from the interpreter.\  n\  nTabError:\  nImproper mixture of spaces and tabs.\  n\  nTrue:\  nbool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.\  n\  nTypeError:\  nInappropriate argument type.\  n\  nUnboundLocalError:\  nLocal name referenced but not bound to a value.\  n\  nUnicodeDecodeError:\  nUnicode decoding error.\  n\  nUnicodeEncodeError:\  nUnicode encoding error.\  n\  nUnicodeError:\  nUnicode related error.\  n\  nUnicodeTranslateError:\  nUnicode translation error.\  n\  nUnicodeWarning:\  nBase class for warnings about Unicode related problems, mostly
related to conversion problems.\  n\  nUserWarning:\  nBase class for warnings generated by user code.\  n\  nValueError:\  nInappropriate argument value (of correct type).\  n\  nWarning:\  nBase class for warning categories.\  n\  nWindowsError:\  nMS-Windows OS system call failed.\  n\  nZeroDivisionError:\  nSecond argument to a division or modulo operation was zero.\  n\  n__build_class__:\  n__build_class__(func, name, *bases, metaclass=None, **kwds) -> class

Internal helper function used by the class statement.\  n\  n__debug__:\  nbool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.\  n\  n__doc__:\  nstr(string[, encoding[, errors]]) -> str

Create a new string object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\  n\  n__import__:\  n__import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module

Import a module.  The globals are only used to determine the context;
they are not modified.  The locals are currently unused.  The fromlist
should be a list of names to emulate ``from name import ...'', or an
empty list to emulate ``import name''.
When importing a module from a package, note that __import__('A.B', ...)
returns package A when fromlist is empty, but its submodule B when
fromlist is not empty.  Level is used to determine whether to perform 
absolute or relative imports.  -1 is the original strategy of attempting
both absolute and relative imports, 0 is absolute, a positive number
is the number of parent directories to search relative to the current module.\  n\  n__name__:\  nstr(string[, encoding[, errors]]) -> str

Create a new string object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\  n\  nabs:\  nabs(number) -> number

Return the absolute value of the argument.\  n\  nall:\  nall(iterable) -> bool

Return True if bool(x) is True for all values x in the iterable.\  n\  nany:\  nany(iterable) -> bool

Return True if bool(x) is True for any x in the iterable.\  n\  nascii:\  nascii(object) -> string

As repr(), return a string containing a printable representation of an
object, but escape the non-ASCII characters in the string returned by
repr() using \x, \u or \U escapes.  This generates a string similar
to that returned by repr() in Python 2.\  n\  nbin:\  nbin(number) -> string

Return the binary representation of an integer or long integer.\  n\  nbool:\  nbool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.\  n\  nbytearray:\  nbytearray(iterable_of_ints) -> bytearray
bytearray(string, encoding[, errors]) -> bytearray
bytearray(bytes_or_bytearray) -> mutable copy of bytes_or_bytearray
bytearray(memory_view) -> bytearray

Construct an mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a bytearray object
  - any object implementing the buffer API.

bytearray(int) -> bytearray

Construct a zero-initialized bytearray of the given length.\  n\  nbytes:\  nbytes(iterable_of_ints) -> bytes
bytes(string, encoding[, errors]) -> bytes
bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
bytes(memory_view) -> bytes

Construct an immutable array of bytes from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a buffer object
  - any object implementing the buffer API.\  n\  nchr:\  nchr(i) -> Unicode character

Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
If 0x10000 <= i, a surrogate pair is returned.\  n\  nclassmethod:\  nclassmethod(function) -> method

Convert a function to be a class method.

A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:

  class C:
      def f(cls, arg1, arg2, ...): ...
      f = classmethod(f)

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.

Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin.\  n\  ncompile:\  ncompile(source, filename, mode[, flags[, dont_inherit]]) -> code object

Compile the source string (a Python module, statement or expression)
into a code object that can be executed by exec() or eval().
The filename will be used for run-time error messages.
The mode must be 'exec' to compile a module, 'single' to compile a
single (interactive) statement, or 'eval' to compile an expression.
The flags argument, if present, controls which future statements influence
the compilation of the code.
The dont_inherit argument, if non-zero, stops the compilation inheriting
the effects of any future statements in effect in the code calling
compile; if absent or zero these statements do influence the compilation,
in addition to any features explicitly specified.\  n\  ncomplex:\  ncomplex(real[, imag]) -> complex number

Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0.\  n\  ncopyright:\  ninteractive prompt objects for printing the license text, a list of
    contributors and the copyright notice.\  n\  ncredits:\  ninteractive prompt objects for printing the license text, a list of
    contributors and the copyright notice.\  n\  ndelattr:\  ndelattr(object, name)

Delete a named attribute on an object; delattr(x, 'y') is equivalent to
``del x.y''.\  n\  ndict:\  ndict() -> new empty dictionary.
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs.
dict(seq) -> new dictionary initialized as if via:
    d = {}
    for k, v in seq:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)\  n\  ndir:\  ndir([object]) -> list of strings

If called without an argument, return the names in the current scope.
Else, return an alphabetized list of names comprising (some of) the attributes
of the given object, and of attributes reachable from it.
If the object supplies a method named __dir__, it will be used; otherwise
the default dir() logic is used and returns:
  for a module object: the module's attributes.
  for a class object:  its attributes, and recursively the attributes
    of its bases.
  for any other object: its attributes, its class's attributes, and
    recursively the attributes of its class's base classes.\  n\  ndivmod:\  ndivmod(x, y) -> (div, mod)

Return the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.\  n\  nenumerate:\  nenumerate(iterable) -> iterator for index, value of iterable

Return an enumerate object.  iterable must be an other object that supports
iteration.  The enumerate object yields pairs containing a count (from
zero) and a value yielded by the iterable argument.  enumerate is useful
for obtaining an indexed list: (0, seq[0]), (1, seq[1]), (2, seq[2]), ...\  n\  neval:\  neval(source[, globals[, locals]]) -> value

Evaluate the source in the context of globals and locals.
The source may be a string representing a Python expression
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
\  n\  nexec:\  nexec(object[, globals[, locals]])

Read and execute code from a object, which can be a string or a code
object.
The globals and locals are dictionaries, defaulting to the current
globals and locals.  If only globals is given, locals defaults to it.\  n\  nfilter:\  nfilter(function or None, iterable) --> filter object

Return an iterator yielding those items of iterable for which function(item)
is true. If function is None, return the items that are true.\  n\  nfloat:\  nfloat(x) -> floating point number

Convert a string or number to a floating point number, if possible.\  n\  nformat:\  nformat(value[, format_spec]) -> string

Returns value.__format__(format_spec)
format_spec defaults to ""\  n\  nfrozenset:\  nfrozenset(iterable) --> frozenset object

Build an immutable unordered collection of unique elements.\  n\  ngetattr:\  ngetattr(object, name[, default]) -> value

Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.
When a default argument is given, it is returned when the attribute doesn't
exist; without it, an exception is raised in that case.\  n\  nglobals:\  nglobals() -> dictionary

Return the dictionary containing the current scope's global variables.\  n\  nhasattr:\  nhasattr(object, name) -> bool

Return whether the object has an attribute with the given name.
(This is done by calling getattr(object, name) and catching exceptions.)\  n\  nhash:\  nhash(object) -> integer

Return a hash value for the object.  Two objects with the same value have
the same hash value.  The reverse is not necessarily true, but likely.\  n\  nhelp:\  nDefine the built-in 'help'.
    This is a wrapper around pydoc.help (with a twist).

    \  n\  nhex:\  nhex(number) -> string

Return the hexadecimal representation of an integer or long integer.\  n\  nid:\  nid(object) -> integer

Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it's the object's memory address.)\  n\  ninput:\  ninput([prompt]) -> string

Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.\  n\  nint:\  nint(x[, base]) -> integer

Convert a string or number to an integer, if possible.  A floating
point argument will be truncated towards zero (this does not include a
string representation of a floating point number!)  When converting a
string, use the optional base.  It is an error to supply a base when
converting a non-string.\  n\  nisinstance:\  nisinstance(object, class-or-type-or-tuple) -> bool

Return whether an object is an instance of a class or of a subclass thereof.
With a type as second argument, return whether that is the object's type.
The form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for
isinstance(x, A) or isinstance(x, B) or ... (etc.).\  n\  nissubclass:\  nissubclass(C, B) -> bool

Return whether class C is a subclass (i.e., a derived class) of class B.
When using a tuple as the second argument issubclass(X, (A, B, ...)),
is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).\  n\  niter:\  niter(iterable) -> iterator
iter(callable, sentinel) -> iterator

Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.\  n\  nlen:\  nlen(object) -> integer

Return the number of items of a sequence or mapping.\  n\  nlicense:\  ninteractive prompt objects for printing the license text, a list of
    contributors and the copyright notice.\  n\  nlist:\  nlist() -> new list
list(sequence) -> new list initialized from sequence's items\  n\  nlocals:\  nlocals() -> dictionary

Update and return a dictionary containing the current scope's local variables.\  n\  nmap:\  nmap(func, *iterables) --> map object

Make an iterator that computes the function using arguments from
each of the iterables.	Stops when the shortest iterable is exhausted.\  n\  nmax:\  nmax(iterable[, key=func]) -> value
max(a, b, c, ...[, key=func]) -> value

With a single iterable argument, return its largest item.
With two or more arguments, return the largest argument.\  n\  nmemoryview:\  nmemoryview(object)

Create a new memoryview object which references the given object.\  n\  nmin:\  nmin(iterable[, key=func]) -> value
min(a, b, c, ...[, key=func]) -> value

With a single iterable argument, return its smallest item.
With two or more arguments, return the smallest argument.\  n\  nnext:\  nnext(iterator[, default])

Return the next item from the iterator. If default is given and the iterator
is exhausted, it is returned instead of raising StopIteration.\  n\  nobject:\  nThe most base type\  n\  noct:\  noct(number) -> string

Return the octal representation of an integer or long integer.\  n\  nopen:\  nOpen file and return a stream.  Raise IOError upon failure.

file is either a text or byte string giving the name (and the path
if the file isn't in the current working directory) of the file to
be opened or an integer file descriptor of the file to be
wrapped. (If a file descriptor is given, it is closed when the
returned I/O object is closed, unless closefd is set to False.)

mode is an optional string that specifies the mode in which the file
is opened. It defaults to 'r' which means open for reading in text
mode.  Other common values are 'w' for writing (truncating the file if
it already exists), and 'a' for appending (which on some Unix systems,
means that all writes append to the end of the file regardless of the
current seek position). In text mode, if encoding is not specified the
encoding used is platform dependent. (For reading and writing raw
bytes use binary mode and leave encoding unspecified.) The available
modes are:

========= ===============================================================
Character Meaning
--------- ---------------------------------------------------------------
'r'       open for reading (default)
'w'       open for writing, truncating the file first
'a'       open for writing, appending to the end of the file if it exists
'b'       binary mode
't'       text mode (default)
'+'       open a disk file for updating (reading and writing)
'U'       universal newline mode (for backwards compatibility; unneeded
          for new code)
========= ===============================================================

The default mode is 'rt' (open for reading text). For binary random
access, the mode 'w+b' opens and truncates the file to 0 bytes, while
'r+b' opens the file without truncation.

Python distinguishes between files opened in binary and text modes,
even when the underlying operating system doesn't. Files opened in
binary mode (appending 'b' to the mode argument) return contents as
bytes objects without any decoding. In text mode (the default, or when
't' is appended to the mode argument), the contents of the file are
returned as strings, the bytes having been first decoded using a
platform-dependent encoding or using the specified encoding if given.

buffering is an optional integer used to set the buffering policy. By
default full buffering is on. Pass 0 to switch buffering off (only
allowed in binary mode), 1 to set line buffering, and an integer > 1
for full buffering.

encoding is the name of the encoding used to decode or encode the
file. This should only be used in text mode. The default encoding is
platform dependent, but any encoding supported by Python can be
passed.  See the codecs module for the list of supported encodings.

errors is an optional string that specifies how encoding errors are to
be handled---this argument should not be used in binary mode. Pass
'strict' to raise a ValueError exception if there is an encoding error
(the default of None has the same effect), or pass 'ignore' to ignore
errors. (Note that ignoring encoding errors can lead to data loss.)
See the documentation for codecs.register for a list of the permitted
encoding error strings.

newline controls how universal newlines works (it only applies to text
mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as
follows:

* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.

* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '', no translation takes place. If newline is any of the
  other legal values, any '\n' characters written are translated to
  the given string.

If closefd is False, the underlying file descriptor will be kept open
when the file is closed. This does not work when a file name is given
and must be True in that case.

open() returns a file object whose type depends on the mode, and
through which the standard file operations such as reading and writing
are performed. When open() is used to open a file in a text mode ('w',
'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
a file in a binary mode, the returned class varies: in read binary
mode, it returns a BufferedReader; in write binary and append binary
modes, it returns a BufferedWriter, and in read/write mode, it returns
a BufferedRandom.

It is also possible to use a string or bytearray as a file for both
reading and writing. For strings StringIO can be used like a file
opened in a text mode, and for bytes a BytesIO can be used like a file
opened in a binary mode.
\  n\  nord:\  nord(c) -> integer

Return the integer ordinal of a one-character string.
A valid surrogate pair is also accepted.\  n\  npow:\  npow(x, y[, z]) -> number

With two arguments, equivalent to x**y.  With three arguments,
equivalent to (x**y) % z, but may be more efficient (e.g. for longs).\  n\  nprint:\  nprint(value, ..., sep=' ', end='\n', file=sys.stdout)

Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep:  string inserted between values, default a space.
end:  string appended after the last value, default a newline.\  n\  nproperty:\  nproperty(fget=None, fset=None, fdel=None, doc=None) -> property attribute

fget is a function to be used for getting an attribute value, and likewise
fset is a function for setting, and fdel a function for del'ing, an
attribute.  Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self._x
    def setx(self, value): self._x = value
    def delx(self): del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")

Decorators make defining new properties or modifying existing ones easy:
class C(object):
    @property
    def x(self): return self._x
    @x.setter
    def x(self, value): self._x = value
    @x.deleter
    def x(self): del self._x
\  n\  nrange:\  nrange([start,] stop[, step]) -> range object

Returns an iterator that generates the numbers in the range on demand.\  n\  nrepr:\  nrepr(object) -> string

Return the canonical string representation of the object.
For most object types, eval(repr(object)) == object.\  n\  nreversed:\  nreversed(sequence) -> reverse iterator over values of the sequence

Return a reverse iterator\  n\  nround:\  nround(number[, ndigits]) -> number

Round a number to a given precision in decimal digits (default 0 digits).
This returns an int when called with one argument, otherwise the
same type as the number. ndigits may be negative.\  n\  nset:\  nset(iterable) --> set object

Build an unordered collection of unique elements.\  n\  nsetattr:\  nsetattr(object, name, value)

Set a named attribute on an object; setattr(x, 'y', v) is equivalent to
``x.y = v''.\  n\  nslice:\  nslice([start,] stop[, step])

Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).\  n\  nsorted:\  nsorted(iterable, key=None, reverse=False) --> new sorted list\  n\  nstaticmethod:\  nstaticmethod(function) -> method

Convert a function to be a static method.

A static method does not receive an implicit first argument.
To declare a static method, use this idiom:

     class C:
         def f(arg1, arg2, ...): ...
	 f = staticmethod(f)

It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.

Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.\  n\  nstr:\  nstr(string[, encoding[, errors]]) -> str

Create a new string object from the given encoded string.
encoding defaults to the current default string encoding.
errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\  n\  nsum:\  nsum(iterable[, start]) -> value

Returns the sum of an iterable of numbers (NOT strings) plus the value
of parameter 'start' (which defaults to 0).  When the iterable is
empty, returns start.\  n\  nsuper:\  nsuper() -> same as super(__class__, <first argument>)
super(type) -> unbound super object
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
	 super().meth(arg)
This works for class methods too:
class C(B):
    @classmethod
    def cmeth(cls, arg):
	 super().cmeth(arg)
\  n\  ntuple:\  ntuple() -> an empty tuple
tuple(sequence) -> tuple initialized from sequence's items

If the argument is a tuple, the return value is the same object.\  n\  ntype:\  ntype(object) -> the object's type
type(name, bases, dict) -> a new type\  n\  nvars:\  nvars([object]) -> dictionary

Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.\  n\  nzip:\  nzip(iter1 [,iter2 [...]]) --> zip object

Return a zip object whose .__next__() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .__next__()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.\  n\  n